{"version":3,"sources":["components/Feedback/Statistics/Statistics.module.css","components/Feedback/FeedbackOptions/FeedbackOptions.module.css","components/Feedback/Section/Section.module.css","components/Feedback/Notification/Notification.module.css","components/Feedback/Statistics/Statistics.js","components/Feedback/FeedbackOptions/FeedbackOptions.js","components/Feedback/Section/Section.js","components/Feedback/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Statistics","good","neutral","bad","total","positivePercentage","className","s","stat","FeedbackOptions","options","onLeaveFeedback","container","map","option","button","type","onClick","Section","title","children","text","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IACAA,EAAOC,QAAU,CAAC,KAAO,2B,kBCAzBD,EAAOC,QAAU,CAAC,UAAY,mCAAmC,OAAS,kC,iBCA1ED,EAAOC,QAAU,CAAC,KAAO,wB,gBCAzBD,EAAOC,QAAU,CAAC,QAAU,gC,+JCoBbC,EAlBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACf,gCACI,oBAAGC,UAAWC,IAAEC,KAAhB,mBAA6BP,KAC7B,oBAAGK,UAAWC,IAAEC,KAAhB,sBAAgCN,KAChC,oBAAGI,UAAWC,IAAEC,KAAhB,kBAA4BL,KAC5B,oBAAGG,UAAWC,IAAEC,KAAhB,oBAA8BJ,KAC9B,oBAAGE,UAAWC,IAAEC,KAAhB,gCAA0CH,EAA1C,Y,gBCOOI,EAbS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAChC,OAAQ,sBAAKL,UAAWC,IAAEK,UAAlB,cAA+BF,EAAQG,KAAI,SAAAC,GAAM,OACrD,wBAAQR,UAAWC,IAAEQ,OAAqBC,KAAK,SAC3CC,QAAS,kBAAMN,EAAgBG,IADnC,SAC6CA,GADXA,U,gBCY3BI,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,gCACGD,GAAS,oBAAIb,UAAWC,IAAEc,KAAjB,SAAwBF,IACjCC,M,gBCQQE,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OACI,8BACI,mBAAGjB,UAAWC,IAAEgB,QAAhB,SAA0BA,OCEvB,SAASC,IAAO,IAAD,EACJC,mBAAS,GADL,mBACrBxB,EADqB,KACfyB,EADe,OAEED,mBAAS,GAFX,mBAErBvB,EAFqB,KAEZyB,EAFY,OAGNF,mBAAS,GAHH,mBAGrBtB,EAHqB,KAGhByB,EAHgB,KAKtBC,EAAqB,WACrB,OAAO1B,EAAMF,EAAOC,GAuB1B,OACG,gCACW,cAAC,EAAD,CAASiB,MAAM,wBAAf,SACI,cAAC,EAAD,CACIT,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBArBI,SAAAD,GACxB,OAAQA,GACN,IAAK,OACHgB,EAAQzB,EAAO,GACf,MACF,IAAK,UACH0B,EAAWzB,EAAU,GACrB,MACF,IAAK,MACH0B,EAAOzB,EAAM,GACb,MACF,QACE,aAckC,IAAzB0B,IAA8B,cAAC,EAAD,CAAcN,QAAQ,sBAGrD,cAAC,EAAD,CAASJ,MAAM,aAAf,SACE,cAAC,EAAD,CACElB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOyB,IACPxB,mBAtCLyB,KAAKC,MAAW,IAAL9B,EAAS4B,SAoB9B,OCtCL,IAYeG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4da5d540.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"stat\":\"Statistics_stat__2PcYh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FeedbackOptions_container__3AWgd\",\"button\":\"FeedbackOptions_button__30N90\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Section_text__3PVQG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notification_message__3l-Co\"};","import s from './Statistics.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n    <div>\r\n        <p className={s.stat}>Good: {good}</p>\r\n        <p className={s.stat}>Neutral: {neutral}</p>\r\n        <p className={s.stat}>Bad: {bad}</p>\r\n        <p className={s.stat}>Total: {total}</p>\r\n        <p className={s.stat}>Positive feedback: {positivePercentage} %</p>\r\n    </div>\r\n);\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral:PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default Statistics;","import s from './FeedbackOptions.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n    return (<div className={s.container}> {options.map(option => \r\n        <button className={s.button} key={option} type=\"button\"\r\n            onClick={() => onLeaveFeedback(option)}>{option}\r\n            </button>)}          \r\n    </div>)\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n\toptions: PropTypes.array.isRequired,\r\n\tonLeaveFeedback: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FeedbackOptions;","import PropTypes from 'prop-types';\r\nimport s from './Section.module.css';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <div>\r\n      {title && <h2 className={s.text}>{title}</h2>}\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;","import s from './Notification.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n    return (\r\n        <div>\r\n            <p className={s.message}>{message}</p>\r\n        </div>  \r\n    )\r\n};\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Notification;","//import logo from './logo.svg';\nimport './App.css';\nimport React, {useState} from 'react';\nimport Statistics from './components/Feedback/Statistics/Statistics';\nimport FeedbackOptions from './components/Feedback/FeedbackOptions/FeedbackOptions';\nimport Section from './components/Feedback/Section/Section';\nimport Notification from './components/Feedback/Notification/Notification';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const countTotalFeedback = () => {\n        return bad + good + neutral;   \n  };\n  \n  const countPositiveFeedbackPercentage = () => {\n        return Math.round(good*100/countTotalFeedback());\n  };\n  \n    const onLeaveFeedback = options => {\n    switch (options) {\n      case 'good':\n        setGood(good + 1);\n        break;\n      case 'neutral':\n        setNeutral(neutral + 1);\n        break;\n      case 'bad':\n        setBad(bad + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n     <div>\n                <Section title=\"Please leave feedback\">\n                    <FeedbackOptions\n                        options={['good', 'neutral', 'bad']}\n                        onLeaveFeedback={onLeaveFeedback}></FeedbackOptions>\n                    \n                    \n                </Section>\n\n                {countTotalFeedback() === 0 ? (<Notification message=\"No feedback given\" />) \n                : (\n                 \n                <Section title=\"Statistics\">\n                  <Statistics\n                    good={good}\n                    neutral={neutral}\n                    bad={bad}\n                    total={countTotalFeedback()}\n                    positivePercentage={countPositiveFeedbackPercentage() } />\n                </Section>   \n            )};\n                \n\n                \n                \n            </div>\n        );\n}\n\n\n\n\n\n// class App extends React.Component {\n//     state = {\n//         good: 0,\n//         neutral: 0,\n//         bad: 0\n//     };\n    \n//     countTotalFeedback = () => {\n//         const { good, neutral, bad } = this.state;\n//         return bad + good + neutral; \n      \n        \n//     };\n\n//   countPositiveFeedbackPercentage = () => {\n//     const { good } = this.state;\n//         return Math.round(good*100/this.countTotalFeedback());\n//     };\n\n//     onLeaveFeedback = (event) => {\n// \t\tconst name = event.target.name;\n// \t\tthis.setState((prevState) => ({\n// \t\t\t[name]: prevState[name] + 1\n// \t\t}));\n// \t};\n    \n    \n//     render() {\n//         const {good, neutral, bad} = this.state;\n//         const options = Object.keys(this.state);\n//         return (\n//             <div>\n\n//                 <Section title=\"Please leave feedback\">\n//                     <FeedbackOptions\n//                         options={options}\n//                         onLeaveFeedback={this.onLeaveFeedback}></FeedbackOptions>\n                    \n                    \n//                 </Section>\n\n//                 {this.countTotalFeedback() === 0 ? (<Notification message=\"No feedback given\" />) \n//                 : (\n                 \n//                 <Section title=\"Statistics\">\n//                   <Statistics\n//                     good={good}\n//                     neutral={neutral}\n//                     bad={bad}\n//                     total={this.countTotalFeedback()}\n//                     positivePercentage={this.countPositiveFeedbackPercentage() } />\n//                 </Section>   \n//             )};\n                \n\n                \n                \n//             </div>\n//         );\n//     }\n// };\n\n// export default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}